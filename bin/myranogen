#!/usr/bin/env node

var program = require('commander');
var mkdirp = require('mkdirp');
var os = require('os');
var fs = require('fs');
var path = require('path');
var readline = require('readline');
var sortedObject = require('sorted-object');

var _exit = process.exit;
var eol = os.EOL;
var pkg = require('../package.json');

var version = pkg.version;

// Re-assign process.exit because of commander
// TODO: Switch to a different command framework
process.exit = exit

// CLI

before(program, 'outputHelp', function () {
  //this.allowUnknownOption();
});

program
  .version(version)
  .usage('[options] [dir]')  
  .option('    --git', 'add .gitignore')  
  .option('-f, --force', 'force on non-empty directory')
  .option('-d, --description [desc]', ' defines USSD app description [description]', 'description')
  //.option('-p, --port', 'http port used to launch the app')
  //.option('-n, --name [name]', 'défini le nom de l\'application USSD [anoter_vas]', 'ussd-app')
  .parse(process.argv);

if (!exit.exited) {
  main();
}

/**
 * Install a before function; AOP.
 */

function before(obj, method, fn) {
  var old = obj[method];

  obj[method] = function () {
    fn.call(this);
    old.apply(this, arguments);
  };
}

/**
 * Prompt for confirmation on STDOUT/STDIN
 */

function confirm(msg, callback) {
  var rl = readline.createInterface({
    input: process.stdin,
    output: process.stdout
  });

  rl.question(msg, function (input) {
    rl.close();
    callback(/^y|yes|ok|true$/i.test(input));
  });
}

/**
 * Create application at the given directory `path`.
 *
 * @param {String} path
 */

function createApplication(folderName, path) {
  /*
  console.log("folder name = " + folderName);
  console.log("destination path = " + path);
  console.log("ussd appname = " + program.ussdAppName);
  */
  var wait = 5;
  
  console.log();
  function complete() {
    if (--wait) return;
    var prompt = launchedFromCmd() ? '>' : '$';

    console.log();
    console.log('   install dependencies:');
    console.log('     %s cd %s && npm install', prompt, path);
    console.log();
    console.log('   run the app:');

    if (launchedFromCmd()) {
      console.log('     %s SET DEBUG=%s:* & npm start', prompt, folderName);
    } else {
      console.log('     %s DEBUG=%s:* npm start', prompt, folderName);
    }

    console.log();
  }

  // JavaScript
  //Loading of template files here
  var app = loadTemplate('js/app.js');
  var www = loadTemplate('js/www');
  
  var routerjs = loadTemplate('js/router.js');
  var appconf = loadTemplate('js/app.conf');
  var frjs = loadTemplate('js/strings/fr.js');
  var enjs = loadTemplate('js/strings/en.js');

  mkdir(path, function(){    
    mkdir(path + '/' + program.ussdAppName, function(){      
      mkdir(path + '/' + program.ussdAppName  + '/libs');  
      
      routerjs = routerjs.replace(/{ussdappname}/g, program.ussdAppName)
                .replace(/{description}/g, program.description);
      write(path + '/' + program.ussdAppName  + '/router.js', routerjs);
      
      appconf = appconf.replace(/{ussdappname}/g, program.ussdAppName)
                .replace(/{description}/g, program.description);
      write(path + '/' + program.ussdAppName  + '/app.conf', appconf);
      
      mkdir(path + '/' + program.ussdAppName  + '/strings', function(){
        write(path + '/' + program.ussdAppName  + '/strings/fr.js', frjs);
        write(path + '/' + program.ussdAppName  + '/strings/en.js', enjs);             
        complete();
      });      
    });
    

    // Route support
    app = app.replace(/{ussdappname}/g, program.ussdAppName)
             .replace(/{description}/g, program.description);

    // package.json
    var pkg = {
        name: program.ussdAppName
      , version: '1.0.0'
      , private: true
      , scripts: { start: 'node ./bin/www' }
      , dependencies: {
          'express': '~4.13.1',
          'body-parser': '~1.13.2',
          'cookie-parser': '~1.3.5',
          'debug': '~2.2.0',
          'morgan': '~1.6.1',
          'serve-favicon': '~2.3.0',
          'myriade-ussd-page-builder-node': '^1.0.0'
      }
    }


    // sort dependencies like npm(1)
    pkg.dependencies = sortedObject(pkg.dependencies);

    // write files
    write(path + '/package.json', JSON.stringify(pkg, null, 2));
    
    app = app.replace(/{ussdappname}/g, program.ussdAppName)
                .replace(/{description}/g, program.description);
    write(path + '/app.js', app);
    
    mkdir(path + '/bin', function(){
      www = www.replace(/{name}/g, program.ussdAppName)
               .replace(/{description}/g, program.description);
      write(path + '/bin/www', www, 0755);
      complete();
    });
    
    /*
    mkdir(path + '/bin', function(){
      www = www.replace('{name}', folderName);
      write(path + '/bin/www', www, 0755);
      complete();
    });*/

    if (program.git) {
      write(path + '/.gitignore', fs.readFileSync(__dirname + '/../templates/js/gitignore', 'utf-8'));
    }

    complete();
  });
}

function copy_template(from, to) {
  from = path.join(__dirname, '..', 'templates', from);
  write(to, fs.readFileSync(from, 'utf-8'));
}

/**
 * Check if the given directory `path` is empty.
 *
 * @param {String} path
 * @param {Function} fn
 */

function emptyDirectory(path, fn) {
  fs.readdir(path, function(err, files){
    if (err && 'ENOENT' != err.code) throw err;
    fn(!files || !files.length);
  });
}

/**
 * Graceful exit for async STDIO
 */

function exit(code) {
  // flush output for Node.js Windows pipe bug
  // https://github.com/joyent/node/issues/6247 is just one bug example
  // https://github.com/visionmedia/mocha/issues/333 has a good discussion
  function done() {
    if (!(draining--)) _exit(code);
  }

  var draining = 0;
  var streams = [process.stdout, process.stderr];

  exit.exited = true;

  streams.forEach(function(stream){
    // submit empty write request and wait for completion
    draining += 1;
    stream.write('', done);
  });

  done();
}

/**
 * Determine if launched from cmd.exe
 */

function launchedFromCmd() {
  return process.platform === 'win32'
    && process.env._ === undefined;
}

/**
 * Load template file.
 */

function loadTemplate(name) {
  return fs.readFileSync(path.join(__dirname, '..', 'templates', name), 'utf-8');
}

/**
 * Main program.
 */

function main() {
  
  // Path
  var destinationPath = program.args.shift() || '.';//Permet d'utiliser le répertoire courant si aucun nom de répertoire n'est spécifié
  
  // Folder name
  var  folderName = path.basename(path.resolve(destinationPath));
  
  //  App name
  program.ussdAppName = 'ussd-app';// program.name? program.name : 'ussd-app';
  
  //  App description
  program.description = program.description? program.description : '';
  

  // Template engine
  /*
  program.template = 'jade';
  if (program.ejs) program.template = 'ejs';
  if (program.hogan) program.template = 'hjs';
  if (program.hbs) program.template = 'hbs';
  */
  
  // Generate application
  emptyDirectory(destinationPath, function (empty) {
    if (empty || program.force) {
      createApplication(folderName, destinationPath);
    } else {
      confirm('destination is not empty, continue? [y/N] ', function (ok) {
        if (ok) {
          process.stdin.destroy();
          createApplication(folderName, destinationPath);
        } else {
          console.error('opération annulée');
          exit(1);
        }
      });
    }
  });
}

/**
 * echo str > path.
 *
 * @param {String} path
 * @param {String} str
 */

function write(path, str, mode) {
  fs.writeFileSync(path, str, { mode: mode || 0666 });
  console.log('   \x1b[36mcreate\x1b[0m : ' + path);
}

/**
 * Mkdir -p.
 *
 * @param {String} path
 * @param {Function} fn
 */

function mkdir(path, fn) {
  mkdirp(path, 0755, function(err){
    if (err) throw err;
    console.log('   \033[36mcreate\033[0m : ' + path);
    fn && fn();
  });
}
